{"ast":null,"code":"import _toConsumableArray from \"@babel/runtime/helpers/toConsumableArray\";\nimport _defineProperty from \"@babel/runtime/helpers/defineProperty\";\nimport _objectWithoutProperties from \"@babel/runtime/helpers/objectWithoutProperties\";\nimport _extends from \"@babel/runtime/helpers/extends\";\nimport _assertThisInitialized from \"@babel/runtime/helpers/assertThisInitialized\";\nimport _inherits from \"@babel/runtime/helpers/inherits\";\nimport _possibleConstructorReturn from \"@babel/runtime/helpers/possibleConstructorReturn\";\nimport _getPrototypeOf from \"@babel/runtime/helpers/getPrototypeOf\";\nimport _classCallCheck from \"@babel/runtime/helpers/classCallCheck\";\nimport _createClass from \"@babel/runtime/helpers/createClass\";\nvar _jsxFileName = \"C:\\\\Users\\\\sw\\\\Documents\\\\MobileAppProgramming2\\\\node_modules\\\\react-native-elements\\\\src\\\\slider\\\\Slider.js\";\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nfunction _createSuper(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct(); return function _createSuperInternal() { var Super = _getPrototypeOf(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = _getPrototypeOf(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return _possibleConstructorReturn(this, result); }; }\n\nfunction _isNativeReflectConstruct() { if (typeof Reflect === \"undefined\" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === \"function\") return true; try { Date.prototype.toString.call(Reflect.construct(Date, [], function () {})); return true; } catch (e) { return false; } }\n\nimport React, { Component } from 'react';\nimport PropTypes from 'prop-types';\nimport View from \"react-native-web/dist/exports/View\";\nimport StyleSheet from \"react-native-web/dist/exports/StyleSheet\";\nimport Animated from \"react-native-web/dist/exports/Animated\";\nimport Easing from \"react-native-web/dist/exports/Easing\";\nimport PanResponder from \"react-native-web/dist/exports/PanResponder\";\nimport { ViewPropTypes, withTheme } from \"../config\";\nvar TRACK_SIZE = 4;\nvar THUMB_SIZE = 20;\nvar DEFAULT_ANIMATION_CONFIGS = {\n  spring: {\n    friction: 7,\n    tension: 100\n  },\n  timing: {\n    duration: 150,\n    easing: Easing.inOut(Easing.ease),\n    delay: 0\n  }\n};\n\nvar getBoundedValue = function getBoundedValue(_ref) {\n  var value = _ref.value,\n      maximumValue = _ref.maximumValue,\n      minimumValue = _ref.minimumValue;\n  return value > maximumValue ? maximumValue : value < minimumValue ? minimumValue : value;\n};\n\nvar Rect = function () {\n  function Rect(x, y, width, height) {\n    _classCallCheck(this, Rect);\n\n    this.x = x;\n    this.y = y;\n    this.width = width;\n    this.height = height;\n  }\n\n  _createClass(Rect, [{\n    key: \"containsPoint\",\n    value: function containsPoint(x, y) {\n      return x >= this.x && y >= this.y && x <= this.x + this.width && y <= this.y + this.height;\n    }\n  }]);\n\n  return Rect;\n}();\n\nvar Slider = function (_Component) {\n  _inherits(Slider, _Component);\n\n  var _super = _createSuper(Slider);\n\n  function Slider(props) {\n    var _this;\n\n    _classCallCheck(this, Slider);\n\n    _this = _super.call(this, props);\n\n    _this.measureContainer = function (x) {\n      _this.handleMeasure('containerSize', x);\n    };\n\n    _this.measureTrack = function (x) {\n      _this.handleMeasure('trackSize', x);\n    };\n\n    _this.measureThumb = function (x) {\n      _this.handleMeasure('thumbSize', x);\n    };\n\n    _this.state = {\n      containerSize: {\n        width: 0,\n        height: 0\n      },\n      trackSize: {\n        width: 0,\n        height: 0\n      },\n      thumbSize: {\n        width: 0,\n        height: 0\n      },\n      allMeasured: false,\n      value: new Animated.Value(getBoundedValue(props))\n    };\n    _this.panResponder = PanResponder.create({\n      onStartShouldSetPanResponder: _this.handleStartShouldSetPanResponder.bind(_assertThisInitialized(_this)),\n      onMoveShouldSetPanResponder: _this.handleMoveShouldSetPanResponder.bind(_assertThisInitialized(_this)),\n      onPanResponderGrant: _this.handlePanResponderGrant.bind(_assertThisInitialized(_this)),\n      onPanResponderMove: _this.handlePanResponderMove.bind(_assertThisInitialized(_this)),\n      onPanResponderRelease: _this.handlePanResponderEnd.bind(_assertThisInitialized(_this)),\n      onPanResponderTerminationRequest: _this.handlePanResponderRequestEnd.bind(_assertThisInitialized(_this)),\n      onPanResponderTerminate: _this.handlePanResponderEnd.bind(_assertThisInitialized(_this))\n    });\n    return _this;\n  }\n\n  _createClass(Slider, [{\n    key: \"componentDidUpdate\",\n    value: function componentDidUpdate(prevProps) {\n      var newValue = getBoundedValue(this.props);\n\n      if (prevProps.value !== newValue) {\n        if (this.props.animateTransitions) {\n          this.setCurrentValueAnimated(newValue);\n        } else {\n          this.setCurrentValue(newValue);\n        }\n      }\n    }\n  }, {\n    key: \"setCurrentValue\",\n    value: function setCurrentValue(value) {\n      this.state.value.setValue(value);\n    }\n  }, {\n    key: \"setCurrentValueAnimated\",\n    value: function setCurrentValueAnimated(value) {\n      var animationType = this.props.animationType;\n\n      var animationConfig = _extends({}, DEFAULT_ANIMATION_CONFIGS[animationType], this.props.animationConfig, {\n        toValue: value\n      });\n\n      Animated[animationType](this.state.value, animationConfig).start();\n    }\n  }, {\n    key: \"handleMoveShouldSetPanResponder\",\n    value: function handleMoveShouldSetPanResponder() {\n      return false;\n    }\n  }, {\n    key: \"handlePanResponderGrant\",\n    value: function handlePanResponderGrant() {\n      this._previousLeft = this.getThumbLeft(this.getCurrentValue());\n      this.fireChangeEvent('onSlidingStart');\n    }\n  }, {\n    key: \"handlePanResponderMove\",\n    value: function handlePanResponderMove(_, gestureState) {\n      if (this.props.disabled) {\n        return;\n      }\n\n      this.setCurrentValue(this.getValue(gestureState));\n      this.fireChangeEvent('onValueChange');\n    }\n  }, {\n    key: \"handlePanResponderRequestEnd\",\n    value: function handlePanResponderRequestEnd() {\n      return false;\n    }\n  }, {\n    key: \"handlePanResponderEnd\",\n    value: function handlePanResponderEnd(_, gestureState) {\n      if (this.props.disabled) {\n        return;\n      }\n\n      this.setCurrentValue(this.getValue(gestureState));\n      this.fireChangeEvent('onSlidingComplete');\n    }\n  }, {\n    key: \"thumbHitTest\",\n    value: function thumbHitTest(_ref2) {\n      var nativeEvent = _ref2.nativeEvent;\n      var thumbTouchRect = this.getThumbTouchRect();\n      return thumbTouchRect.containsPoint(nativeEvent.locationX, nativeEvent.locationY);\n    }\n  }, {\n    key: \"handleStartShouldSetPanResponder\",\n    value: function handleStartShouldSetPanResponder(e) {\n      return this.thumbHitTest(e);\n    }\n  }, {\n    key: \"fireChangeEvent\",\n    value: function fireChangeEvent(event) {\n      if (this.props[event]) {\n        this.props[event](this.getCurrentValue());\n      }\n    }\n  }, {\n    key: \"getTouchOverflowSize\",\n    value: function getTouchOverflowSize() {\n      var _this$state = this.state,\n          thumbSize = _this$state.thumbSize,\n          allMeasured = _this$state.allMeasured,\n          containerSize = _this$state.containerSize;\n      var thumbTouchSize = this.props.thumbTouchSize;\n      var size = {};\n\n      if (allMeasured === true) {\n        size.width = Math.max(0, thumbTouchSize.width - thumbSize.width);\n        size.height = Math.max(0, thumbTouchSize.height - containerSize.height);\n      }\n\n      return size;\n    }\n  }, {\n    key: \"getTouchOverflowStyle\",\n    value: function getTouchOverflowStyle() {\n      var _this$getTouchOverflo = this.getTouchOverflowSize(),\n          width = _this$getTouchOverflo.width,\n          height = _this$getTouchOverflo.height;\n\n      var touchOverflowStyle = {};\n\n      if (width !== undefined && height !== undefined) {\n        var verticalMargin = -height / 2;\n        touchOverflowStyle.marginTop = verticalMargin;\n        touchOverflowStyle.marginBottom = verticalMargin;\n        var horizontalMargin = -width / 2;\n        touchOverflowStyle.marginLeft = horizontalMargin;\n        touchOverflowStyle.marginRight = horizontalMargin;\n      }\n\n      if (this.props.debugTouchArea === true) {\n        touchOverflowStyle.backgroundColor = 'orange';\n        touchOverflowStyle.opacity = 0.5;\n      }\n\n      return touchOverflowStyle;\n    }\n  }, {\n    key: \"handleMeasure\",\n    value: function handleMeasure(name, x) {\n      var _x$nativeEvent$layout = x.nativeEvent.layout,\n          layoutWidth = _x$nativeEvent$layout.width,\n          layoutHeight = _x$nativeEvent$layout.height;\n      var width = this.props.orientation === 'vertical' ? layoutHeight : layoutWidth;\n      var height = this.props.orientation === 'vertical' ? layoutWidth : layoutHeight;\n      var size = {\n        width: width,\n        height: height\n      };\n      var storeName = \"_\" + name;\n      var currentSize = this[storeName];\n\n      if (currentSize && width === currentSize.width && height === currentSize.height) {\n        return;\n      }\n\n      this[storeName] = size;\n\n      if (this._containerSize && this._trackSize && this._thumbSize) {\n        this.setState({\n          containerSize: this._containerSize,\n          trackSize: this._trackSize,\n          thumbSize: this._thumbSize,\n          allMeasured: true\n        });\n      }\n    }\n  }, {\n    key: \"getValue\",\n    value: function getValue(gestureState) {\n      var length = this.state.containerSize.width - this.state.thumbSize.width;\n      var thumbLeft = this._previousLeft + (this.props.orientation === 'vertical' ? gestureState.dy : gestureState.dx);\n      var ratio = thumbLeft / length;\n\n      if (this.props.step) {\n        return Math.max(this.props.minimumValue, Math.min(this.props.maximumValue, this.props.minimumValue + Math.round(ratio * (this.props.maximumValue - this.props.minimumValue) / this.props.step) * this.props.step));\n      }\n\n      return Math.max(this.props.minimumValue, Math.min(this.props.maximumValue, ratio * (this.props.maximumValue - this.props.minimumValue) + this.props.minimumValue));\n    }\n  }, {\n    key: \"getCurrentValue\",\n    value: function getCurrentValue() {\n      return this.state.value.__getValue();\n    }\n  }, {\n    key: \"getRatio\",\n    value: function getRatio(value) {\n      return (value - this.props.minimumValue) / (this.props.maximumValue - this.props.minimumValue);\n    }\n  }, {\n    key: \"getThumbLeft\",\n    value: function getThumbLeft(value) {\n      var ratio = this.getRatio(value);\n      return ratio * (this.state.containerSize.width - this.state.thumbSize.width);\n    }\n  }, {\n    key: \"getThumbTouchRect\",\n    value: function getThumbTouchRect() {\n      var _this$state2 = this.state,\n          thumbSize = _this$state2.thumbSize,\n          containerSize = _this$state2.containerSize;\n      var thumbTouchSize = this.props.thumbTouchSize;\n      var touchOverflowSize = this.getTouchOverflowSize();\n\n      if (this.props.orientation === 'vertical') {\n        return new Rect(touchOverflowSize.height / 2 + (containerSize.height - thumbTouchSize.height) / 2, touchOverflowSize.width / 2 + this.getThumbLeft(this.getCurrentValue()) + (thumbSize.width - thumbTouchSize.width) / 2, thumbTouchSize.width, thumbTouchSize.height);\n      }\n\n      return new Rect(touchOverflowSize.width / 2 + this.getThumbLeft(this.getCurrentValue()) + (thumbSize.width - thumbTouchSize.width) / 2, touchOverflowSize.height / 2 + (containerSize.height - thumbTouchSize.height) / 2, thumbTouchSize.width, thumbTouchSize.height);\n    }\n  }, {\n    key: \"renderDebugThumbTouchRect\",\n    value: function renderDebugThumbTouchRect(thumbLeft) {\n      var thumbTouchRect = this.getThumbTouchRect();\n      var positionStyle = {\n        left: thumbLeft,\n        top: thumbTouchRect.y,\n        width: thumbTouchRect.width,\n        height: thumbTouchRect.height\n      };\n      return React.createElement(Animated.View, {\n        style: positionStyle,\n        pointerEvents: \"none\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 319,\n          columnNumber: 12\n        }\n      });\n    }\n  }, {\n    key: \"getMinimumTrackStyles\",\n    value: function getMinimumTrackStyles(thumbStart) {\n      var _this$state3 = this.state,\n          thumbSize = _this$state3.thumbSize,\n          trackSize = _this$state3.trackSize;\n      var minimumTrackStyle = {\n        position: 'absolute'\n      };\n\n      if (this.props.orientation === 'vertical') {\n        minimumTrackStyle.height = Animated.add(thumbStart, thumbSize.height / 2);\n        minimumTrackStyle.marginLeft = -trackSize.width;\n      } else {\n        minimumTrackStyle.width = Animated.add(thumbStart, thumbSize.width / 2);\n        minimumTrackStyle.marginTop = -trackSize.height;\n      }\n\n      return minimumTrackStyle;\n    }\n  }, {\n    key: \"getThumbPositionStyles\",\n    value: function getThumbPositionStyles(thumbStart) {\n      if (this.props.orientation === 'vertical') {\n        return [{\n          translateX: -(this.state.trackSize.height + this.state.thumbSize.height) / 2\n        }, {\n          translateY: thumbStart\n        }];\n      }\n\n      return [{\n        translateX: thumbStart\n      }, {\n        translateY: -(this.state.trackSize.height + this.state.thumbSize.height) / 2\n      }];\n    }\n  }, {\n    key: \"render\",\n    value: function render() {\n      var _this$props = this.props,\n          minimumValue = _this$props.minimumValue,\n          maximumValue = _this$props.maximumValue,\n          minimumTrackTintColor = _this$props.minimumTrackTintColor,\n          maximumTrackTintColor = _this$props.maximumTrackTintColor,\n          thumbTintColor = _this$props.thumbTintColor,\n          containerStyle = _this$props.containerStyle,\n          style = _this$props.style,\n          trackStyle = _this$props.trackStyle,\n          thumbStyle = _this$props.thumbStyle,\n          debugTouchArea = _this$props.debugTouchArea,\n          orientation = _this$props.orientation,\n          other = _objectWithoutProperties(_this$props, [\"minimumValue\", \"maximumValue\", \"minimumTrackTintColor\", \"maximumTrackTintColor\", \"thumbTintColor\", \"containerStyle\", \"style\", \"trackStyle\", \"thumbStyle\", \"debugTouchArea\", \"orientation\"]);\n\n      var _this$state4 = this.state,\n          value = _this$state4.value,\n          containerSize = _this$state4.containerSize,\n          thumbSize = _this$state4.thumbSize,\n          allMeasured = _this$state4.allMeasured;\n      var mainStyles = containerStyle || styles;\n      var thumbStart = value.interpolate({\n        inputRange: [minimumValue, maximumValue],\n        outputRange: [0, containerSize.width - thumbSize.width]\n      });\n      var valueVisibleStyle = {};\n\n      if (!allMeasured) {\n        valueVisibleStyle.height = 0;\n        valueVisibleStyle.width = 0;\n      }\n\n      var minimumTrackStyle = _objectSpread(_objectSpread({}, this.getMinimumTrackStyles(thumbStart)), {}, {\n        backgroundColor: minimumTrackTintColor\n      }, valueVisibleStyle);\n\n      var thumbStyleTransform = thumbStyle && thumbStyle.transform || [];\n      var touchOverflowStyle = this.getTouchOverflowStyle();\n      return React.createElement(View, _extends({}, other, {\n        style: StyleSheet.flatten([orientation === 'vertical' ? mainStyles.containerVertical : mainStyles.containerHorizontal, style]),\n        onLayout: this.measureContainer,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 397,\n          columnNumber: 7\n        }\n      }), React.createElement(View, {\n        style: StyleSheet.flatten([mainStyles.track, orientation === 'vertical' ? mainStyles.trackVertical : mainStyles.trackHorizontal, trackStyle, {\n          backgroundColor: maximumTrackTintColor\n        }]),\n        onLayout: this.measureTrack,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 407,\n          columnNumber: 9\n        }\n      }), React.createElement(Animated.View, {\n        style: StyleSheet.flatten([mainStyles.track, orientation === 'vertical' ? mainStyles.trackVertical : mainStyles.trackHorizontal, trackStyle, minimumTrackStyle]),\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 418,\n          columnNumber: 9\n        }\n      }), React.createElement(Animated.View, {\n        testID: \"sliderThumb\",\n        onLayout: this.measureThumb,\n        style: StyleSheet.flatten([{\n          backgroundColor: thumbTintColor\n        }, mainStyles.thumb, orientation === 'vertical' ? mainStyles.thumbVertical(trackStyle && trackStyle.width) : mainStyles.thumbHorizontal(trackStyle && trackStyle.height), thumbStyle, _objectSpread({\n          transform: [].concat(_toConsumableArray(this.getThumbPositionStyles(thumbStart)), _toConsumableArray(thumbStyleTransform))\n        }, valueVisibleStyle)]),\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 428,\n          columnNumber: 9\n        }\n      }), React.createElement(View, _extends({\n        style: StyleSheet.flatten([styles.touchArea, touchOverflowStyle])\n      }, this.panResponder.panHandlers, {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 447,\n          columnNumber: 9\n        }\n      }), debugTouchArea === true && this.renderDebugThumbTouchRect(thumbStart)));\n    }\n  }]);\n\n  return Slider;\n}(Component);\n\nSlider.propTypes = {\n  value: PropTypes.number,\n  disabled: PropTypes.bool,\n  minimumValue: PropTypes.number,\n  maximumValue: PropTypes.number,\n  step: PropTypes.number,\n  minimumTrackTintColor: PropTypes.string,\n  maximumTrackTintColor: PropTypes.string,\n  thumbTintColor: PropTypes.string,\n  thumbTouchSize: PropTypes.shape({\n    width: PropTypes.number,\n    height: PropTypes.number\n  }),\n  onValueChange: PropTypes.func,\n  onSlidingStart: PropTypes.func,\n  onSlidingComplete: PropTypes.func,\n  style: ViewPropTypes.style,\n  trackStyle: ViewPropTypes.style,\n  thumbStyle: ViewPropTypes.style,\n  debugTouchArea: PropTypes.bool,\n  animateTransitions: PropTypes.bool,\n  animationType: PropTypes.oneOf(['spring', 'timing']),\n  orientation: PropTypes.oneOf(['horizontal', 'vertical']),\n  animationConfig: PropTypes.object,\n  containerStyle: ViewPropTypes.style\n};\nSlider.defaultProps = {\n  value: 0,\n  minimumValue: 0,\n  maximumValue: 1,\n  step: 0,\n  minimumTrackTintColor: '#3f3f3f',\n  maximumTrackTintColor: '#b3b3b3',\n  thumbTintColor: 'red',\n  thumbTouchSize: {\n    width: 40,\n    height: 40\n  },\n  debugTouchArea: false,\n  animationType: 'timing',\n  orientation: 'horizontal'\n};\nvar styles = StyleSheet.create({\n  containerHorizontal: {\n    height: 40,\n    justifyContent: 'center'\n  },\n  containerVertical: {\n    width: 40,\n    flexDirection: 'column',\n    alignItems: 'center'\n  },\n  track: {\n    borderRadius: TRACK_SIZE / 2\n  },\n  trackHorizontal: {\n    height: TRACK_SIZE\n  },\n  trackVertical: {\n    flex: 1,\n    width: TRACK_SIZE\n  },\n  thumb: {\n    position: 'absolute',\n    width: THUMB_SIZE,\n    height: THUMB_SIZE,\n    borderRadius: THUMB_SIZE / 2\n  },\n  thumbHorizontal: function thumbHorizontal(height) {\n    return {\n      top: 22 + (height ? (height - 4) / 2 : 0)\n    };\n  },\n  thumbVertical: function thumbVertical(width) {\n    return {\n      left: 22 + (width ? (width - 4) / 2 : 0)\n    };\n  },\n  touchArea: {\n    position: 'absolute',\n    backgroundColor: 'transparent',\n    top: 0,\n    left: 0,\n    right: 0,\n    bottom: 0\n  },\n  debugThumbTouchArea: {\n    position: 'absolute',\n    backgroundColor: 'green',\n    opacity: 0.5\n  }\n});\nexport { Slider };\nexport default withTheme(Slider, 'Slider');","map":{"version":3,"sources":["C:/Users/sw/Documents/MobileAppProgramming2/node_modules/react-native-elements/src/slider/Slider.js"],"names":["React","Component","PropTypes","ViewPropTypes","withTheme","TRACK_SIZE","THUMB_SIZE","DEFAULT_ANIMATION_CONFIGS","spring","friction","tension","timing","duration","easing","Easing","inOut","ease","delay","getBoundedValue","value","maximumValue","minimumValue","Rect","x","y","width","height","Slider","props","measureContainer","handleMeasure","measureTrack","measureThumb","state","containerSize","trackSize","thumbSize","allMeasured","Animated","Value","panResponder","PanResponder","create","onStartShouldSetPanResponder","handleStartShouldSetPanResponder","bind","onMoveShouldSetPanResponder","handleMoveShouldSetPanResponder","onPanResponderGrant","handlePanResponderGrant","onPanResponderMove","handlePanResponderMove","onPanResponderRelease","handlePanResponderEnd","onPanResponderTerminationRequest","handlePanResponderRequestEnd","onPanResponderTerminate","prevProps","newValue","animateTransitions","setCurrentValueAnimated","setCurrentValue","setValue","animationType","animationConfig","toValue","start","_previousLeft","getThumbLeft","getCurrentValue","fireChangeEvent","_","gestureState","disabled","getValue","nativeEvent","thumbTouchRect","getThumbTouchRect","containsPoint","locationX","locationY","e","thumbHitTest","event","thumbTouchSize","size","Math","max","getTouchOverflowSize","touchOverflowStyle","undefined","verticalMargin","marginTop","marginBottom","horizontalMargin","marginLeft","marginRight","debugTouchArea","backgroundColor","opacity","name","layout","layoutWidth","layoutHeight","orientation","storeName","currentSize","_containerSize","_trackSize","_thumbSize","setState","length","thumbLeft","dy","dx","ratio","step","min","round","__getValue","getRatio","touchOverflowSize","positionStyle","left","top","thumbStart","minimumTrackStyle","position","add","translateX","translateY","minimumTrackTintColor","maximumTrackTintColor","thumbTintColor","containerStyle","style","trackStyle","thumbStyle","other","mainStyles","styles","interpolate","inputRange","outputRange","valueVisibleStyle","getMinimumTrackStyles","thumbStyleTransform","transform","getTouchOverflowStyle","StyleSheet","flatten","containerVertical","containerHorizontal","track","trackVertical","trackHorizontal","thumb","thumbVertical","thumbHorizontal","getThumbPositionStyles","touchArea","panHandlers","renderDebugThumbTouchRect","propTypes","number","bool","string","shape","onValueChange","func","onSlidingStart","onSlidingComplete","oneOf","object","defaultProps","justifyContent","flexDirection","alignItems","borderRadius","flex","right","bottom","debugThumbTouchArea"],"mappings":"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","sourcesContent":["import React, { Component } from 'react';\r\nimport PropTypes from 'prop-types';\r\nimport { View, StyleSheet, Animated, Easing, PanResponder } from 'react-native';\r\n\r\nimport { ViewPropTypes, withTheme } from '../config';\r\n\r\nconst TRACK_SIZE = 4;\r\nconst THUMB_SIZE = 20;\r\n\r\nconst DEFAULT_ANIMATION_CONFIGS = {\r\n  spring: {\r\n    friction: 7,\r\n    tension: 100,\r\n  },\r\n  timing: {\r\n    duration: 150,\r\n    easing: Easing.inOut(Easing.ease),\r\n    delay: 0,\r\n  },\r\n};\r\n\r\nconst getBoundedValue = ({ value, maximumValue, minimumValue }) =>\r\n  value > maximumValue\r\n    ? maximumValue\r\n    : value < minimumValue\r\n    ? minimumValue\r\n    : value;\r\n\r\nclass Rect {\r\n  constructor(x, y, width, height) {\r\n    this.x = x;\r\n    this.y = y;\r\n    this.width = width;\r\n    this.height = height;\r\n  }\r\n\r\n  containsPoint(x, y) {\r\n    return (\r\n      x >= this.x &&\r\n      y >= this.y &&\r\n      x <= this.x + this.width &&\r\n      y <= this.y + this.height\r\n    );\r\n  }\r\n}\r\n\r\nclass Slider extends Component {\r\n  constructor(props) {\r\n    super(props);\r\n    this.state = {\r\n      containerSize: { width: 0, height: 0 },\r\n      trackSize: { width: 0, height: 0 },\r\n      thumbSize: { width: 0, height: 0 },\r\n      allMeasured: false,\r\n      value: new Animated.Value(getBoundedValue(props)),\r\n    };\r\n\r\n    this.panResponder = PanResponder.create({\r\n      onStartShouldSetPanResponder: this.handleStartShouldSetPanResponder.bind(\r\n        this\r\n      ),\r\n      onMoveShouldSetPanResponder: this.handleMoveShouldSetPanResponder.bind(\r\n        this\r\n      ),\r\n      onPanResponderGrant: this.handlePanResponderGrant.bind(this),\r\n      onPanResponderMove: this.handlePanResponderMove.bind(this),\r\n      onPanResponderRelease: this.handlePanResponderEnd.bind(this),\r\n      onPanResponderTerminationRequest: this.handlePanResponderRequestEnd.bind(\r\n        this\r\n      ),\r\n      onPanResponderTerminate: this.handlePanResponderEnd.bind(this),\r\n    });\r\n  }\r\n\r\n  componentDidUpdate(prevProps) {\r\n    const newValue = getBoundedValue(this.props);\r\n\r\n    if (prevProps.value !== newValue) {\r\n      if (this.props.animateTransitions) {\r\n        this.setCurrentValueAnimated(newValue);\r\n      } else {\r\n        this.setCurrentValue(newValue);\r\n      }\r\n    }\r\n  }\r\n\r\n  setCurrentValue(value) {\r\n    this.state.value.setValue(value);\r\n  }\r\n\r\n  setCurrentValueAnimated(value) {\r\n    const { animationType } = this.props;\r\n    const animationConfig = Object.assign(\r\n      {},\r\n      DEFAULT_ANIMATION_CONFIGS[animationType],\r\n      this.props.animationConfig,\r\n      {\r\n        toValue: value,\r\n      }\r\n    );\r\n\r\n    Animated[animationType](this.state.value, animationConfig).start();\r\n  }\r\n\r\n  handleMoveShouldSetPanResponder(/* e: Object, gestureState: Object */) {\r\n    // Should we become active when the user moves a touch over the thumb?\r\n    return false;\r\n  }\r\n\r\n  handlePanResponderGrant(/* e: Object, gestureState: Object */) {\r\n    this._previousLeft = this.getThumbLeft(this.getCurrentValue());\r\n    this.fireChangeEvent('onSlidingStart');\r\n  }\r\n\r\n  handlePanResponderMove(_, gestureState) {\r\n    if (this.props.disabled) {\r\n      return;\r\n    }\r\n\r\n    this.setCurrentValue(this.getValue(gestureState));\r\n    this.fireChangeEvent('onValueChange');\r\n  }\r\n\r\n  handlePanResponderRequestEnd() {\r\n    // Should we allow another component to take over this pan?\r\n    return false;\r\n  }\r\n\r\n  handlePanResponderEnd(_, gestureState) {\r\n    if (this.props.disabled) {\r\n      return;\r\n    }\r\n\r\n    this.setCurrentValue(this.getValue(gestureState));\r\n    this.fireChangeEvent('onSlidingComplete');\r\n  }\r\n\r\n  thumbHitTest({ nativeEvent }) {\r\n    const thumbTouchRect = this.getThumbTouchRect();\r\n    return thumbTouchRect.containsPoint(\r\n      nativeEvent.locationX,\r\n      nativeEvent.locationY\r\n    );\r\n  }\r\n\r\n  handleStartShouldSetPanResponder(e /* gestureState: Object */) {\r\n    // Should we become active when the user presses down on the thumb?\r\n    return this.thumbHitTest(e);\r\n  }\r\n\r\n  fireChangeEvent(event) {\r\n    if (this.props[event]) {\r\n      this.props[event](this.getCurrentValue());\r\n    }\r\n  }\r\n\r\n  getTouchOverflowSize() {\r\n    const { thumbSize, allMeasured, containerSize } = this.state;\r\n    const { thumbTouchSize } = this.props;\r\n\r\n    const size = {};\r\n    if (allMeasured === true) {\r\n      size.width = Math.max(0, thumbTouchSize.width - thumbSize.width);\r\n      size.height = Math.max(0, thumbTouchSize.height - containerSize.height);\r\n    }\r\n\r\n    return size;\r\n  }\r\n\r\n  getTouchOverflowStyle() {\r\n    const { width, height } = this.getTouchOverflowSize();\r\n\r\n    const touchOverflowStyle = {};\r\n    if (width !== undefined && height !== undefined) {\r\n      const verticalMargin = -height / 2;\r\n      touchOverflowStyle.marginTop = verticalMargin;\r\n      touchOverflowStyle.marginBottom = verticalMargin;\r\n\r\n      const horizontalMargin = -width / 2;\r\n      touchOverflowStyle.marginLeft = horizontalMargin;\r\n      touchOverflowStyle.marginRight = horizontalMargin;\r\n    }\r\n\r\n    if (this.props.debugTouchArea === true) {\r\n      touchOverflowStyle.backgroundColor = 'orange';\r\n      touchOverflowStyle.opacity = 0.5;\r\n    }\r\n\r\n    return touchOverflowStyle;\r\n  }\r\n\r\n  handleMeasure(name, x) {\r\n    const { width: layoutWidth, height: layoutHeight } = x.nativeEvent.layout;\r\n    const width =\r\n      this.props.orientation === 'vertical' ? layoutHeight : layoutWidth;\r\n    const height =\r\n      this.props.orientation === 'vertical' ? layoutWidth : layoutHeight;\r\n    const size = { width, height };\r\n    const storeName = `_${name}`;\r\n    const currentSize = this[storeName];\r\n    if (\r\n      currentSize &&\r\n      width === currentSize.width &&\r\n      height === currentSize.height\r\n    ) {\r\n      return;\r\n    }\r\n    this[storeName] = size;\r\n\r\n    if (this._containerSize && this._trackSize && this._thumbSize) {\r\n      this.setState({\r\n        containerSize: this._containerSize,\r\n        trackSize: this._trackSize,\r\n        thumbSize: this._thumbSize,\r\n        allMeasured: true,\r\n      });\r\n    }\r\n  }\r\n\r\n  measureContainer = x => {\r\n    this.handleMeasure('containerSize', x);\r\n  };\r\n\r\n  measureTrack = x => {\r\n    this.handleMeasure('trackSize', x);\r\n  };\r\n\r\n  measureThumb = x => {\r\n    this.handleMeasure('thumbSize', x);\r\n  };\r\n\r\n  getValue(gestureState) {\r\n    const length = this.state.containerSize.width - this.state.thumbSize.width;\r\n    const thumbLeft =\r\n      this._previousLeft +\r\n      (this.props.orientation === 'vertical'\r\n        ? gestureState.dy\r\n        : gestureState.dx);\r\n\r\n    const ratio = thumbLeft / length;\r\n\r\n    if (this.props.step) {\r\n      return Math.max(\r\n        this.props.minimumValue,\r\n        Math.min(\r\n          this.props.maximumValue,\r\n          this.props.minimumValue +\r\n            Math.round(\r\n              (ratio * (this.props.maximumValue - this.props.minimumValue)) /\r\n                this.props.step\r\n            ) *\r\n              this.props.step\r\n        )\r\n      );\r\n    }\r\n    return Math.max(\r\n      this.props.minimumValue,\r\n      Math.min(\r\n        this.props.maximumValue,\r\n        ratio * (this.props.maximumValue - this.props.minimumValue) +\r\n          this.props.minimumValue\r\n      )\r\n    );\r\n  }\r\n\r\n  getCurrentValue() {\r\n    return this.state.value.__getValue();\r\n  }\r\n\r\n  getRatio(value) {\r\n    return (\r\n      (value - this.props.minimumValue) /\r\n      (this.props.maximumValue - this.props.minimumValue)\r\n    );\r\n  }\r\n\r\n  getThumbLeft(value) {\r\n    const ratio = this.getRatio(value);\r\n    return (\r\n      ratio * (this.state.containerSize.width - this.state.thumbSize.width)\r\n    );\r\n  }\r\n\r\n  getThumbTouchRect() {\r\n    const { thumbSize, containerSize } = this.state;\r\n    const { thumbTouchSize } = this.props;\r\n    const touchOverflowSize = this.getTouchOverflowSize();\r\n\r\n    if (this.props.orientation === 'vertical') {\r\n      return new Rect(\r\n        touchOverflowSize.height / 2 +\r\n          (containerSize.height - thumbTouchSize.height) / 2,\r\n        touchOverflowSize.width / 2 +\r\n          this.getThumbLeft(this.getCurrentValue()) +\r\n          (thumbSize.width - thumbTouchSize.width) / 2,\r\n        thumbTouchSize.width,\r\n        thumbTouchSize.height\r\n      );\r\n    }\r\n    return new Rect(\r\n      touchOverflowSize.width / 2 +\r\n        this.getThumbLeft(this.getCurrentValue()) +\r\n        (thumbSize.width - thumbTouchSize.width) / 2,\r\n      touchOverflowSize.height / 2 +\r\n        (containerSize.height - thumbTouchSize.height) / 2,\r\n      thumbTouchSize.width,\r\n      thumbTouchSize.height\r\n    );\r\n  }\r\n\r\n  renderDebugThumbTouchRect(thumbLeft) {\r\n    const thumbTouchRect = this.getThumbTouchRect();\r\n    const positionStyle = {\r\n      left: thumbLeft,\r\n      top: thumbTouchRect.y,\r\n      width: thumbTouchRect.width,\r\n      height: thumbTouchRect.height,\r\n    };\r\n    return <Animated.View style={positionStyle} pointerEvents=\"none\" />;\r\n  }\r\n\r\n  getMinimumTrackStyles(thumbStart) {\r\n    const { thumbSize, trackSize } = this.state;\r\n    const minimumTrackStyle = {\r\n      position: 'absolute',\r\n    };\r\n\r\n    if (this.props.orientation === 'vertical') {\r\n      minimumTrackStyle.height = Animated.add(thumbStart, thumbSize.height / 2);\r\n      minimumTrackStyle.marginLeft = -trackSize.width;\r\n    } else {\r\n      minimumTrackStyle.width = Animated.add(thumbStart, thumbSize.width / 2);\r\n      minimumTrackStyle.marginTop = -trackSize.height;\r\n    }\r\n    return minimumTrackStyle;\r\n  }\r\n\r\n  getThumbPositionStyles(thumbStart) {\r\n    if (this.props.orientation === 'vertical') {\r\n      return [\r\n        {\r\n          translateX:\r\n            -(this.state.trackSize.height + this.state.thumbSize.height) / 2,\r\n        },\r\n        { translateY: thumbStart },\r\n      ];\r\n    }\r\n    return [\r\n      { translateX: thumbStart },\r\n      {\r\n        translateY:\r\n          -(this.state.trackSize.height + this.state.thumbSize.height) / 2,\r\n      },\r\n    ];\r\n  }\r\n\r\n  render() {\r\n    const {\r\n      minimumValue,\r\n      maximumValue,\r\n      minimumTrackTintColor,\r\n      maximumTrackTintColor,\r\n      thumbTintColor,\r\n      containerStyle,\r\n      style,\r\n      trackStyle,\r\n      thumbStyle,\r\n      debugTouchArea,\r\n      orientation,\r\n      ...other\r\n    } = this.props;\r\n\r\n    const { value, containerSize, thumbSize, allMeasured } = this.state;\r\n\r\n    const mainStyles = containerStyle || styles;\r\n    const thumbStart = value.interpolate({\r\n      inputRange: [minimumValue, maximumValue],\r\n      outputRange: [0, containerSize.width - thumbSize.width],\r\n      // extrapolate: 'clamp',\r\n    });\r\n\r\n    const valueVisibleStyle = {};\r\n    if (!allMeasured) {\r\n      valueVisibleStyle.height = 0;\r\n      valueVisibleStyle.width = 0;\r\n    }\r\n\r\n    const minimumTrackStyle = {\r\n      ...this.getMinimumTrackStyles(thumbStart),\r\n      backgroundColor: minimumTrackTintColor,\r\n      ...valueVisibleStyle,\r\n    };\r\n\r\n    const thumbStyleTransform = (thumbStyle && thumbStyle.transform) || [];\r\n    const touchOverflowStyle = this.getTouchOverflowStyle();\r\n    return (\r\n      <View\r\n        {...other}\r\n        style={StyleSheet.flatten([\r\n          orientation === 'vertical'\r\n            ? mainStyles.containerVertical\r\n            : mainStyles.containerHorizontal,\r\n          style,\r\n        ])}\r\n        onLayout={this.measureContainer}\r\n      >\r\n        <View\r\n          style={StyleSheet.flatten([\r\n            mainStyles.track,\r\n            orientation === 'vertical'\r\n              ? mainStyles.trackVertical\r\n              : mainStyles.trackHorizontal,\r\n            trackStyle,\r\n            { backgroundColor: maximumTrackTintColor },\r\n          ])}\r\n          onLayout={this.measureTrack}\r\n        />\r\n        <Animated.View\r\n          style={StyleSheet.flatten([\r\n            mainStyles.track,\r\n            orientation === 'vertical'\r\n              ? mainStyles.trackVertical\r\n              : mainStyles.trackHorizontal,\r\n            trackStyle,\r\n            minimumTrackStyle,\r\n          ])}\r\n        />\r\n        <Animated.View\r\n          testID=\"sliderThumb\"\r\n          onLayout={this.measureThumb}\r\n          style={StyleSheet.flatten([\r\n            { backgroundColor: thumbTintColor },\r\n            mainStyles.thumb,\r\n            orientation === 'vertical'\r\n              ? mainStyles.thumbVertical(trackStyle && trackStyle.width)\r\n              : mainStyles.thumbHorizontal(trackStyle && trackStyle.height),\r\n            thumbStyle,\r\n            {\r\n              transform: [\r\n                ...this.getThumbPositionStyles(thumbStart),\r\n                ...thumbStyleTransform,\r\n              ],\r\n              ...valueVisibleStyle,\r\n            },\r\n          ])}\r\n        />\r\n        <View\r\n          style={StyleSheet.flatten([styles.touchArea, touchOverflowStyle])}\r\n          {...this.panResponder.panHandlers}\r\n        >\r\n          {debugTouchArea === true &&\r\n            this.renderDebugThumbTouchRect(thumbStart)}\r\n        </View>\r\n      </View>\r\n    );\r\n  }\r\n}\r\n\r\nSlider.propTypes = {\r\n  /**\r\n   * Initial value of the slider. The value should be between minimumValue\r\n   * and maximumValue, which default to 0 and 1 respectively.\r\n   * Default value is 0.\r\n   *\r\n   * *This is not a controlled component*, e.g. if you don't update\r\n   * the value, the component won't be reset to its inital value.\r\n   */\r\n  value: PropTypes.number,\r\n\r\n  /**\r\n   * If true the user won't be able to move the slider.\r\n   * Default value is false.\r\n   */\r\n  disabled: PropTypes.bool,\r\n\r\n  /**\r\n   * Initial minimum value of the slider. Default value is 0.\r\n   */\r\n  minimumValue: PropTypes.number,\r\n\r\n  /**\r\n   * Initial maximum value of the slider. Default value is 1.\r\n   */\r\n  maximumValue: PropTypes.number,\r\n\r\n  /**\r\n   * Step value of the slider. The value should be between 0 and\r\n   * (maximumValue - minimumValue). Default value is 0.\r\n   */\r\n  step: PropTypes.number,\r\n\r\n  /**\r\n   * The color used for the track to the left of the button. Overrides the\r\n   * default blue gradient image.\r\n   */\r\n  minimumTrackTintColor: PropTypes.string,\r\n\r\n  /**\r\n   * The color used for the track to the right of the button. Overrides the\r\n   * default blue gradient image.\r\n   */\r\n  maximumTrackTintColor: PropTypes.string,\r\n\r\n  /**\r\n   * The color used for the thumb.\r\n   */\r\n  thumbTintColor: PropTypes.string,\r\n\r\n  /**\r\n   * The size of the touch area that allows moving the thumb.\r\n   * The touch area has the same center has the visible thumb.\r\n   * This allows to have a visually small thumb while still allowing the user\r\n   * to move it easily.\r\n   * The default is {width: 40, height: 40}.\r\n   */\r\n  thumbTouchSize: PropTypes.shape({\r\n    width: PropTypes.number,\r\n    height: PropTypes.number,\r\n  }),\r\n\r\n  /**\r\n   * Callback continuously called while the user is dragging the slider.\r\n   */\r\n  onValueChange: PropTypes.func,\r\n\r\n  /**\r\n   * Callback called when the user starts changing the value (e.g. when\r\n   * the slider is pressed).\r\n   */\r\n  onSlidingStart: PropTypes.func,\r\n\r\n  /**\r\n   * Callback called when the user finishes changing the value (e.g. when\r\n   * the slider is released).\r\n   */\r\n  onSlidingComplete: PropTypes.func,\r\n\r\n  /**\r\n   * The style applied to the slider container.\r\n   */\r\n  style: ViewPropTypes.style,\r\n\r\n  /**\r\n   * The style applied to the track.\r\n   */\r\n  trackStyle: ViewPropTypes.style,\r\n\r\n  /**\r\n   * The style applied to the thumb.\r\n   */\r\n  thumbStyle: ViewPropTypes.style,\r\n\r\n  /**\r\n   * Set this to true to visually see the thumb touch rect in green.\r\n   */\r\n  debugTouchArea: PropTypes.bool,\r\n\r\n  /**\r\n   * Set to true to animate values with default 'timing' animation type\r\n   */\r\n  animateTransitions: PropTypes.bool,\r\n\r\n  /**\r\n   * Custom Animation type. 'spring' or 'timing'.\r\n   */\r\n  animationType: PropTypes.oneOf(['spring', 'timing']),\r\n\r\n  /**\r\n   * Choose the orientation. 'horizontal' or 'vertical'.\r\n   */\r\n  orientation: PropTypes.oneOf(['horizontal', 'vertical']),\r\n\r\n  /**\r\n   * Used to configure the animation parameters.  These are the same parameters in the Animated library.\r\n   */\r\n  animationConfig: PropTypes.object,\r\n  containerStyle: ViewPropTypes.style,\r\n};\r\n\r\nSlider.defaultProps = {\r\n  value: 0,\r\n  minimumValue: 0,\r\n  maximumValue: 1,\r\n  step: 0,\r\n  minimumTrackTintColor: '#3f3f3f',\r\n  maximumTrackTintColor: '#b3b3b3',\r\n  thumbTintColor: 'red',\r\n  thumbTouchSize: { width: 40, height: 40 },\r\n  debugTouchArea: false,\r\n  animationType: 'timing',\r\n  orientation: 'horizontal',\r\n};\r\n\r\nconst styles = StyleSheet.create({\r\n  containerHorizontal: {\r\n    height: 40,\r\n    justifyContent: 'center',\r\n  },\r\n  containerVertical: {\r\n    width: 40,\r\n    flexDirection: 'column',\r\n    alignItems: 'center',\r\n  },\r\n  track: {\r\n    borderRadius: TRACK_SIZE / 2,\r\n  },\r\n  trackHorizontal: {\r\n    height: TRACK_SIZE,\r\n  },\r\n  trackVertical: {\r\n    flex: 1,\r\n    width: TRACK_SIZE,\r\n  },\r\n  thumb: {\r\n    position: 'absolute',\r\n    width: THUMB_SIZE,\r\n    height: THUMB_SIZE,\r\n    borderRadius: THUMB_SIZE / 2,\r\n  },\r\n  thumbHorizontal: height => ({\r\n    top: 22 + (height ? (height - 4) / 2 : 0),\r\n  }),\r\n  thumbVertical: width => ({\r\n    left: 22 + (width ? (width - 4) / 2 : 0),\r\n  }),\r\n  touchArea: {\r\n    position: 'absolute',\r\n    backgroundColor: 'transparent',\r\n    top: 0,\r\n    left: 0,\r\n    right: 0,\r\n    bottom: 0,\r\n  },\r\n  debugThumbTouchArea: {\r\n    position: 'absolute',\r\n    backgroundColor: 'green',\r\n    opacity: 0.5,\r\n  },\r\n});\r\n\r\nexport { Slider };\r\nexport default withTheme(Slider, 'Slider');\r\n"]},"metadata":{},"sourceType":"module"}