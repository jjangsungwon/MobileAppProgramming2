{"ast":null,"code":"import _toConsumableArray from \"@babel/runtime/helpers/toConsumableArray\";\nimport _extends from \"@babel/runtime/helpers/extends\";\nimport _objectWithoutProperties from \"@babel/runtime/helpers/objectWithoutProperties\";\nimport _classCallCheck from \"@babel/runtime/helpers/classCallCheck\";\nimport _createClass from \"@babel/runtime/helpers/createClass\";\nimport _inherits from \"@babel/runtime/helpers/inherits\";\nimport _possibleConstructorReturn from \"@babel/runtime/helpers/possibleConstructorReturn\";\nimport _getPrototypeOf from \"@babel/runtime/helpers/getPrototypeOf\";\nvar _jsxFileName = \"C:\\\\Users\\\\sw\\\\Documents\\\\MobileAppProgramming2\\\\node_modules\\\\@expo\\\\vector-icons\\\\build\\\\vendor\\\\react-native-vector-icons\\\\lib\\\\create-icon-set.js\";\n\nfunction _createSuper(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct(); return function _createSuperInternal() { var Super = _getPrototypeOf(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = _getPrototypeOf(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return _possibleConstructorReturn(this, result); }; }\n\nfunction _isNativeReflectConstruct() { if (typeof Reflect === \"undefined\" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === \"function\") return true; try { Date.prototype.toString.call(Reflect.construct(Date, [], function () {})); return true; } catch (e) { return false; } }\n\nimport React, { PureComponent } from 'react';\nimport PropTypes from 'prop-types';\nimport NativeModules from \"react-native-web/dist/exports/NativeModules\";\nimport Platform from \"react-native-web/dist/exports/Platform\";\nimport PixelRatio from \"react-native-web/dist/exports/PixelRatio\";\nimport processColor from \"react-native-web/dist/exports/processColor\";\nimport Text from \"react-native-web/dist/exports/Text\";\nimport ensureNativeModuleAvailable from \"./ensure-native-module-available\";\nimport createIconButtonComponent from \"./icon-button\";\nimport createTabBarItemIOSComponent from \"./tab-bar-item-ios\";\nimport createToolbarAndroidComponent from \"./toolbar-android\";\nexport var NativeIconAPI = NativeModules.RNVectorIconsManager || NativeModules.RNVectorIconsModule;\nexport var DEFAULT_ICON_SIZE = 12;\nexport var DEFAULT_ICON_COLOR = 'black';\nexport default function createIconSet(glyphMap, fontFamily, fontFile, fontStyle) {\n  var fontBasename = fontFile ? fontFile.replace(/\\.(otf|ttf)$/, '') : fontFamily;\n  var fontReference = Platform.select({\n    windows: \"Assets/\" + fontFile + \"#\" + fontFamily,\n    android: fontBasename,\n    web: fontBasename,\n    default: fontFamily\n  });\n  var IconNamePropType = PropTypes.oneOf(Object.keys(glyphMap));\n\n  var Icon = function (_PureComponent) {\n    _inherits(Icon, _PureComponent);\n\n    var _super = _createSuper(Icon);\n\n    function Icon() {\n      var _this;\n\n      _classCallCheck(this, Icon);\n\n      for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {\n        args[_key] = arguments[_key];\n      }\n\n      _this = _super.call.apply(_super, [this].concat(args));\n      _this.root = null;\n\n      _this.handleRef = function (ref) {\n        _this.root = ref;\n      };\n\n      return _this;\n    }\n\n    _createClass(Icon, [{\n      key: \"setNativeProps\",\n      value: function setNativeProps(nativeProps) {\n        if (this.root) {\n          this.root.setNativeProps(nativeProps);\n        }\n      }\n    }, {\n      key: \"render\",\n      value: function render() {\n        var _this$props = this.props,\n            name = _this$props.name,\n            size = _this$props.size,\n            color = _this$props.color,\n            style = _this$props.style,\n            children = _this$props.children,\n            props = _objectWithoutProperties(_this$props, [\"name\", \"size\", \"color\", \"style\", \"children\"]);\n\n        var glyph = name ? glyphMap[name] || '?' : '';\n\n        if (typeof glyph === 'number') {\n          glyph = String.fromCharCode(glyph);\n        }\n\n        var styleDefaults = {\n          fontSize: size,\n          color: color\n        };\n        var styleOverrides = {\n          fontFamily: fontReference,\n          fontWeight: 'normal',\n          fontStyle: 'normal'\n        };\n        props.style = [styleDefaults, style, styleOverrides, fontStyle || {}];\n        props.ref = this.handleRef;\n        return React.createElement(Text, _extends({}, props, {\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 86,\n            columnNumber: 9\n          }\n        }), glyph, children);\n      }\n    }]);\n\n    return Icon;\n  }(PureComponent);\n\n  Icon.propTypes = {\n    allowFontScaling: PropTypes.bool,\n    name: IconNamePropType,\n    size: PropTypes.number,\n    color: PropTypes.oneOfType([PropTypes.string, PropTypes.number]),\n    children: PropTypes.node,\n    style: PropTypes.any\n  };\n  Icon.defaultProps = {\n    size: DEFAULT_ICON_SIZE,\n    allowFontScaling: false\n  };\n  var imageSourceCache = {};\n\n  function getImageSource(name) {\n    var size = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : DEFAULT_ICON_SIZE;\n    var color = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : DEFAULT_ICON_COLOR;\n    ensureNativeModuleAvailable();\n    var glyph = glyphMap[name] || '?';\n\n    if (typeof glyph === 'number') {\n      glyph = String.fromCharCode(glyph);\n    }\n\n    var processedColor = processColor(color);\n    var cacheKey = glyph + \":\" + size + \":\" + processedColor;\n    var scale = PixelRatio.get();\n    return new Promise(function (resolve, reject) {\n      var cached = imageSourceCache[cacheKey];\n\n      if (typeof cached !== 'undefined') {\n        if (!cached || cached instanceof Error) {\n          reject(cached);\n        } else {\n          resolve({\n            uri: cached,\n            scale: scale\n          });\n        }\n      } else {\n        NativeIconAPI.getImageForFont(fontReference, glyph, size, processedColor, function (err, image) {\n          var error = typeof err === 'string' ? new Error(err) : err;\n          imageSourceCache[cacheKey] = image || error || false;\n\n          if (!error && image) {\n            resolve({\n              uri: image,\n              scale: scale\n            });\n          } else {\n            reject(error);\n          }\n        });\n      }\n    });\n  }\n\n  function loadFont() {\n    var file = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : fontFile;\n\n    if (Platform.OS === 'ios') {\n      ensureNativeModuleAvailable();\n\n      if (!file) {\n        return Promise.reject(new Error('Unable to load font, because no file was specified. '));\n      }\n\n      return NativeIconAPI.loadFontWithFileName.apply(NativeIconAPI, _toConsumableArray(file.split('.')));\n    }\n\n    return Promise.resolve();\n  }\n\n  function hasIcon(name) {\n    return Object.prototype.hasOwnProperty.call(glyphMap, name);\n  }\n\n  function getRawGlyphMap() {\n    return glyphMap;\n  }\n\n  function getFontFamily() {\n    return fontReference;\n  }\n\n  Icon.Button = createIconButtonComponent(Icon);\n  Icon.TabBarItem = createTabBarItemIOSComponent(IconNamePropType, getImageSource);\n  Icon.TabBarItemIOS = Icon.TabBarItem;\n  Icon.ToolbarAndroid = createToolbarAndroidComponent(IconNamePropType, getImageSource);\n  Icon.getImageSource = getImageSource;\n  Icon.loadFont = loadFont;\n  Icon.hasIcon = hasIcon;\n  Icon.getRawGlyphMap = getRawGlyphMap;\n  Icon.getFontFamily = getFontFamily;\n  return Icon;\n}","map":{"version":3,"sources":["C:/Users/sw/Documents/MobileAppProgramming2/node_modules/@expo/vector-icons/build/vendor/react-native-vector-icons/lib/create-icon-set.js"],"names":["React","PureComponent","PropTypes","ensureNativeModuleAvailable","createIconButtonComponent","createTabBarItemIOSComponent","createToolbarAndroidComponent","NativeIconAPI","NativeModules","RNVectorIconsManager","RNVectorIconsModule","DEFAULT_ICON_SIZE","DEFAULT_ICON_COLOR","createIconSet","glyphMap","fontFamily","fontFile","fontStyle","fontBasename","replace","fontReference","Platform","select","windows","android","web","default","IconNamePropType","oneOf","Object","keys","Icon","root","handleRef","ref","nativeProps","setNativeProps","props","name","size","color","style","children","glyph","String","fromCharCode","styleDefaults","fontSize","styleOverrides","fontWeight","propTypes","allowFontScaling","bool","number","oneOfType","string","node","any","defaultProps","imageSourceCache","getImageSource","processedColor","processColor","cacheKey","scale","PixelRatio","get","Promise","resolve","reject","cached","Error","uri","getImageForFont","err","image","error","loadFont","file","OS","loadFontWithFileName","split","hasIcon","prototype","hasOwnProperty","call","getRawGlyphMap","getFontFamily","Button","TabBarItem","TabBarItemIOS","ToolbarAndroid"],"mappings":"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","sourcesContent":["import React, { PureComponent } from 'react';\r\nimport PropTypes from 'prop-types';\r\nimport { NativeModules, Platform, PixelRatio, processColor, Text } from 'react-native';\r\n\r\nimport ensureNativeModuleAvailable from './ensure-native-module-available';\r\nimport createIconButtonComponent from './icon-button';\r\nimport createTabBarItemIOSComponent from './tab-bar-item-ios';\r\nimport createToolbarAndroidComponent from './toolbar-android';\r\n\r\nexport const NativeIconAPI =\r\n  NativeModules.RNVectorIconsManager || NativeModules.RNVectorIconsModule;\r\n\r\nexport const DEFAULT_ICON_SIZE = 12;\r\nexport const DEFAULT_ICON_COLOR = 'black';\r\n\r\nexport default function createIconSet(\r\n  glyphMap,\r\n  fontFamily,\r\n  fontFile,\r\n  fontStyle\r\n) {\r\n  // Android doesn't care about actual fontFamily name, it will only look in fonts folder.\r\n  const fontBasename = fontFile\r\n    ? fontFile.replace(/\\.(otf|ttf)$/, '')\r\n    : fontFamily;\r\n\r\n  const fontReference = Platform.select({\r\n    windows: `Assets/${fontFile}#${fontFamily}`,\r\n    android: fontBasename,\r\n    web: fontBasename,\r\n    default: fontFamily,\r\n  });\r\n\r\n  const IconNamePropType = PropTypes.oneOf(Object.keys(glyphMap));\r\n\r\n  class Icon extends PureComponent {\r\n    static propTypes = {\r\n      allowFontScaling: PropTypes.bool,\r\n      name: IconNamePropType,\r\n      size: PropTypes.number,\r\n      color: PropTypes.oneOfType([PropTypes.string, PropTypes.number]),\r\n      children: PropTypes.node,\r\n      style: PropTypes.any, // eslint-disable-line react/forbid-prop-types\r\n    };\r\n\r\n    static defaultProps = {\r\n      size: DEFAULT_ICON_SIZE,\r\n      allowFontScaling: false,\r\n    };\r\n\r\n    root = null;\r\n\r\n    setNativeProps(nativeProps) {\r\n      if (this.root) {\r\n        this.root.setNativeProps(nativeProps);\r\n      }\r\n    }\r\n\r\n    handleRef = ref => {\r\n      this.root = ref;\r\n    };\r\n\r\n    render() {\r\n      const { name, size, color, style, children, ...props } = this.props;\r\n\r\n      let glyph = name ? glyphMap[name] || '?' : '';\r\n      if (typeof glyph === 'number') {\r\n        glyph = String.fromCharCode(glyph);\r\n      }\r\n\r\n      const styleDefaults = {\r\n        fontSize: size,\r\n        color,\r\n      };\r\n\r\n      const styleOverrides = {\r\n        fontFamily: fontReference,\r\n        fontWeight: 'normal',\r\n        fontStyle: 'normal',\r\n      };\r\n\r\n      props.style = [styleDefaults, style, styleOverrides, fontStyle || {}];\r\n      props.ref = this.handleRef;\r\n\r\n      return (\r\n        <Text {...props}>\r\n          {glyph}\r\n          {children}\r\n        </Text>\r\n      );\r\n    }\r\n  }\r\n\r\n  const imageSourceCache = {};\r\n\r\n  function getImageSource(\r\n    name,\r\n    size = DEFAULT_ICON_SIZE,\r\n    color = DEFAULT_ICON_COLOR\r\n  ) {\r\n    ensureNativeModuleAvailable();\r\n\r\n    let glyph = glyphMap[name] || '?';\r\n    if (typeof glyph === 'number') {\r\n      glyph = String.fromCharCode(glyph);\r\n    }\r\n\r\n    const processedColor = processColor(color);\r\n    const cacheKey = `${glyph}:${size}:${processedColor}`;\r\n    const scale = PixelRatio.get();\r\n\r\n    return new Promise((resolve, reject) => {\r\n      const cached = imageSourceCache[cacheKey];\r\n      if (typeof cached !== 'undefined') {\r\n        if (!cached || cached instanceof Error) {\r\n          reject(cached);\r\n        } else {\r\n          resolve({ uri: cached, scale });\r\n        }\r\n      } else {\r\n        NativeIconAPI.getImageForFont(\r\n          fontReference,\r\n          glyph,\r\n          size,\r\n          processedColor,\r\n          (err, image) => {\r\n            const error = typeof err === 'string' ? new Error(err) : err;\r\n            imageSourceCache[cacheKey] = image || error || false;\r\n            if (!error && image) {\r\n              resolve({ uri: image, scale });\r\n            } else {\r\n              reject(error);\r\n            }\r\n          }\r\n        );\r\n      }\r\n    });\r\n  }\r\n\r\n  function loadFont(file = fontFile) {\r\n    if (Platform.OS === 'ios') {\r\n      ensureNativeModuleAvailable();\r\n      if (!file) {\r\n        return Promise.reject(\r\n          new Error('Unable to load font, because no file was specified. ')\r\n        );\r\n      }\r\n      return NativeIconAPI.loadFontWithFileName(...file.split('.'));\r\n    }\r\n    return Promise.resolve();\r\n  }\r\n\r\n  function hasIcon(name) {\r\n    return Object.prototype.hasOwnProperty.call(glyphMap, name);\r\n  }\r\n\r\n  function getRawGlyphMap() {\r\n    return glyphMap;\r\n  }\r\n\r\n  function getFontFamily() {\r\n    return fontReference;\r\n  }\r\n\r\n  Icon.Button = createIconButtonComponent(Icon);\r\n  Icon.TabBarItem = createTabBarItemIOSComponent(\r\n    IconNamePropType,\r\n    getImageSource\r\n  );\r\n  Icon.TabBarItemIOS = Icon.TabBarItem;\r\n  Icon.ToolbarAndroid = createToolbarAndroidComponent(\r\n    IconNamePropType,\r\n    getImageSource\r\n  );\r\n  Icon.getImageSource = getImageSource;\r\n  Icon.loadFont = loadFont;\r\n  Icon.hasIcon = hasIcon;\r\n  Icon.getRawGlyphMap = getRawGlyphMap;\r\n  Icon.getFontFamily = getFontFamily;\r\n\r\n  return Icon;\r\n}\r\n"]},"metadata":{},"sourceType":"module"}