{"ast":null,"code":"import _defineProperty from \"@babel/runtime/helpers/defineProperty\";\nimport _extends from \"@babel/runtime/helpers/extends\";\nimport _objectWithoutProperties from \"@babel/runtime/helpers/objectWithoutProperties\";\nvar _jsxFileName = \"C:\\\\Users\\\\sw\\\\Documents\\\\MobileAppProgramming2\\\\node_modules\\\\react-native-elements\\\\src\\\\icons\\\\Icon.js\";\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nimport React from 'react';\nimport PropTypes from 'prop-types';\nimport Platform from \"react-native-web/dist/exports/Platform\";\nimport TouchableHighlight from \"react-native-web/dist/exports/TouchableHighlight\";\nimport View from \"react-native-web/dist/exports/View\";\nimport StyleSheet from \"react-native-web/dist/exports/StyleSheet\";\nimport NativeText from \"react-native-web/dist/exports/Text\";\nimport TouchableNativeFeedback from \"react-native-web/dist/exports/TouchableNativeFeedback\";\nimport Color from 'color';\nimport getIconType from \"../helpers/getIconType\";\nimport { ViewPropTypes, withTheme } from \"../config\";\n\nvar Icon = function Icon(props) {\n  var type = props.type,\n      name = props.name,\n      size = props.size,\n      color = props.color,\n      iconStyle = props.iconStyle,\n      underlayColor = props.underlayColor,\n      reverse = props.reverse,\n      raised = props.raised,\n      containerStyle = props.containerStyle,\n      reverseColor = props.reverseColor,\n      disabled = props.disabled,\n      disabledStyle = props.disabledStyle,\n      onPress = props.onPress,\n      _props$Component = props.Component,\n      Component = _props$Component === void 0 ? onPress ? Platform.select({\n    android: TouchableNativeFeedback,\n    default: TouchableHighlight\n  }) : View : _props$Component,\n      solid = props.solid,\n      brand = props.brand,\n      attributes = _objectWithoutProperties(props, [\"type\", \"name\", \"size\", \"color\", \"iconStyle\", \"underlayColor\", \"reverse\", \"raised\", \"containerStyle\", \"reverseColor\", \"disabled\", \"disabledStyle\", \"onPress\", \"Component\", \"solid\", \"brand\"]);\n\n  var IconComponent = getIconType(type);\n\n  var getBackgroundColor = function getBackgroundColor() {\n    if (reverse) {\n      return color;\n    }\n\n    return raised ? 'white' : 'transparent';\n  };\n\n  var buttonStyles = {\n    borderRadius: size + 4,\n    height: size * 2 + 4,\n    width: size * 2 + 4\n  };\n\n  if (Platform.OS === 'android' && !attributes.background) {\n    if (Platform.Version >= 21) {\n      attributes.background = TouchableNativeFeedback.Ripple(Color(color).alpha(0.2).rgb().string(), true);\n    }\n  }\n\n  return React.createElement(View, {\n    style: StyleSheet.flatten([styles.container, (reverse || raised) && styles.button, (reverse || raised) && buttonStyles, raised && styles.raised, iconStyle && iconStyle.borderRadius ? {\n      borderRadius: iconStyle.borderRadius\n    } : {}, containerStyle && containerStyle]),\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 70,\n      columnNumber: 5\n    }\n  }, React.createElement(Component, _extends({}, attributes, onPress && {\n    onPress: onPress,\n    disabled: disabled,\n    underlayColor: reverse ? color : underlayColor,\n    activeOpacity: 0.3\n  }, {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 84,\n      columnNumber: 7\n    }\n  }), React.createElement(View, {\n    style: StyleSheet.flatten([(reverse || raised) && buttonStyles, {\n      backgroundColor: getBackgroundColor(),\n      alignItems: 'center',\n      justifyContent: 'center'\n    }, disabled && styles.disabled, disabled && disabledStyle]),\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 93,\n      columnNumber: 9\n    }\n  }, React.createElement(IconComponent, {\n    testID: \"iconIcon\",\n    style: StyleSheet.flatten([{\n      backgroundColor: 'transparent'\n    }, iconStyle && iconStyle]),\n    size: size,\n    name: name,\n    color: reverse ? reverseColor : color,\n    solid: solid,\n    brand: brand,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 105,\n      columnNumber: 11\n    }\n  }))));\n};\n\nIcon.propTypes = {\n  type: PropTypes.string,\n  name: PropTypes.string,\n  size: PropTypes.number,\n  color: PropTypes.string,\n  Component: PropTypes.elementType,\n  underlayColor: PropTypes.string,\n  reverse: PropTypes.bool,\n  raised: PropTypes.bool,\n  containerStyle: ViewPropTypes.style,\n  iconStyle: NativeText.propTypes.style,\n  onPress: PropTypes.func,\n  reverseColor: PropTypes.string,\n  disabled: PropTypes.bool,\n  disabledStyle: ViewPropTypes.style,\n  solid: PropTypes.bool,\n  brand: PropTypes.bool\n};\nIcon.defaultProps = {\n  underlayColor: 'transparent',\n  reverse: false,\n  raised: false,\n  size: 24,\n  color: 'black',\n  reverseColor: 'white',\n  disabled: false,\n  type: 'material',\n  solid: false,\n  brand: false\n};\nvar styles = StyleSheet.create({\n  container: {\n    overflow: 'hidden'\n  },\n  button: {\n    margin: 7\n  },\n  raised: _objectSpread({}, Platform.select({\n    android: {\n      elevation: 2\n    },\n    default: {\n      shadowColor: 'rgba(0,0,0, .4)',\n      shadowOffset: {\n        height: 1,\n        width: 1\n      },\n      shadowOpacity: 1,\n      shadowRadius: 1\n    }\n  })),\n  disabled: {\n    backgroundColor: '#D1D5D8'\n  }\n});\nexport { Icon };\nexport default withTheme(Icon, 'Icon');","map":{"version":3,"sources":["C:/Users/sw/Documents/MobileAppProgramming2/node_modules/react-native-elements/src/icons/Icon.js"],"names":["React","PropTypes","Color","getIconType","ViewPropTypes","withTheme","Icon","props","type","name","size","color","iconStyle","underlayColor","reverse","raised","containerStyle","reverseColor","disabled","disabledStyle","onPress","Component","Platform","select","android","TouchableNativeFeedback","default","TouchableHighlight","View","solid","brand","attributes","IconComponent","getBackgroundColor","buttonStyles","borderRadius","height","width","OS","background","Version","Ripple","alpha","rgb","string","StyleSheet","flatten","styles","container","button","activeOpacity","backgroundColor","alignItems","justifyContent","propTypes","number","elementType","bool","style","NativeText","func","defaultProps","create","overflow","margin","elevation","shadowColor","shadowOffset","shadowOpacity","shadowRadius"],"mappings":"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","sourcesContent":["import React from 'react';\r\nimport PropTypes from 'prop-types';\r\nimport {\r\n  Platform,\r\n  TouchableHighlight,\r\n  View,\r\n  StyleSheet,\r\n  Text as NativeText,\r\n  TouchableNativeFeedback,\r\n} from 'react-native';\r\nimport Color from 'color';\r\n\r\nimport getIconType from '../helpers/getIconType';\r\nimport { ViewPropTypes, withTheme } from '../config';\r\n\r\nconst Icon = props => {\r\n  const {\r\n    type,\r\n    name,\r\n    size,\r\n    color,\r\n    iconStyle,\r\n    underlayColor,\r\n    reverse,\r\n    raised,\r\n    containerStyle,\r\n    reverseColor,\r\n    disabled,\r\n    disabledStyle,\r\n    onPress,\r\n    Component = onPress\r\n      ? Platform.select({\r\n          android: TouchableNativeFeedback,\r\n          default: TouchableHighlight,\r\n        })\r\n      : View,\r\n    solid,\r\n    brand,\r\n    ...attributes\r\n  } = props;\r\n\r\n  const IconComponent = getIconType(type);\r\n  const getBackgroundColor = () => {\r\n    if (reverse) {\r\n      return color;\r\n    }\r\n\r\n    return raised ? 'white' : 'transparent';\r\n  };\r\n\r\n  const buttonStyles = {\r\n    borderRadius: size + 4,\r\n    height: size * 2 + 4,\r\n    width: size * 2 + 4,\r\n  };\r\n\r\n  if (Platform.OS === 'android' && !attributes.background) {\r\n    if (Platform.Version >= 21) {\r\n      attributes.background = TouchableNativeFeedback.Ripple(\r\n        Color(color)\r\n          .alpha(0.2)\r\n          .rgb()\r\n          .string(),\r\n        true\r\n      );\r\n    }\r\n  }\r\n\r\n  return (\r\n    <View\r\n      style={StyleSheet.flatten([\r\n        styles.container,\r\n        (reverse || raised) && styles.button,\r\n        (reverse || raised) && buttonStyles,\r\n        raised && styles.raised,\r\n        iconStyle && iconStyle.borderRadius\r\n          ? {\r\n              borderRadius: iconStyle.borderRadius,\r\n            }\r\n          : {},\r\n        containerStyle && containerStyle,\r\n      ])}\r\n    >\r\n      <Component\r\n        {...attributes}\r\n        {...onPress && {\r\n          onPress,\r\n          disabled,\r\n          underlayColor: reverse ? color : underlayColor,\r\n          activeOpacity: 0.3,\r\n        }}\r\n      >\r\n        <View\r\n          style={StyleSheet.flatten([\r\n            (reverse || raised) && buttonStyles,\r\n            {\r\n              backgroundColor: getBackgroundColor(),\r\n              alignItems: 'center',\r\n              justifyContent: 'center',\r\n            },\r\n            disabled && styles.disabled,\r\n            disabled && disabledStyle,\r\n          ])}\r\n        >\r\n          <IconComponent\r\n            testID=\"iconIcon\"\r\n            style={StyleSheet.flatten([\r\n              { backgroundColor: 'transparent' },\r\n              iconStyle && iconStyle,\r\n            ])}\r\n            size={size}\r\n            name={name}\r\n            color={reverse ? reverseColor : color}\r\n            solid={solid}\r\n            brand={brand}\r\n          />\r\n        </View>\r\n      </Component>\r\n    </View>\r\n  );\r\n};\r\n\r\nIcon.propTypes = {\r\n  type: PropTypes.string,\r\n  name: PropTypes.string,\r\n  size: PropTypes.number,\r\n  color: PropTypes.string,\r\n  Component: PropTypes.elementType,\r\n  underlayColor: PropTypes.string,\r\n  reverse: PropTypes.bool,\r\n  raised: PropTypes.bool,\r\n  containerStyle: ViewPropTypes.style,\r\n  iconStyle: NativeText.propTypes.style,\r\n  onPress: PropTypes.func,\r\n  reverseColor: PropTypes.string,\r\n  disabled: PropTypes.bool,\r\n  disabledStyle: ViewPropTypes.style,\r\n  solid: PropTypes.bool,\r\n  brand: PropTypes.bool,\r\n};\r\n\r\nIcon.defaultProps = {\r\n  underlayColor: 'transparent',\r\n  reverse: false,\r\n  raised: false,\r\n  size: 24,\r\n  color: 'black',\r\n  reverseColor: 'white',\r\n  disabled: false,\r\n  type: 'material',\r\n  solid: false,\r\n  brand: false,\r\n};\r\n\r\nconst styles = StyleSheet.create({\r\n  container: {\r\n    overflow: 'hidden',\r\n  },\r\n  button: {\r\n    margin: 7,\r\n  },\r\n  raised: {\r\n    ...Platform.select({\r\n      android: {\r\n        elevation: 2,\r\n      },\r\n      default: {\r\n        shadowColor: 'rgba(0,0,0, .4)',\r\n        shadowOffset: { height: 1, width: 1 },\r\n        shadowOpacity: 1,\r\n        shadowRadius: 1,\r\n      },\r\n    }),\r\n  },\r\n  disabled: {\r\n    backgroundColor: '#D1D5D8',\r\n  },\r\n});\r\n\r\nexport { Icon };\r\nexport default withTheme(Icon, 'Icon');\r\n"]},"metadata":{},"sourceType":"module"}