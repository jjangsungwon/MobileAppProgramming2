{"ast":null,"code":"var dataUriPattern = /^data:/;\n\nvar ImageUriCache = function () {\n  function ImageUriCache() {}\n\n  ImageUriCache.has = function has(uri) {\n    var entries = ImageUriCache._entries;\n    var isDataUri = dataUriPattern.test(uri);\n    return isDataUri || Boolean(entries[uri]);\n  };\n\n  ImageUriCache.add = function add(uri) {\n    var entries = ImageUriCache._entries;\n    var lastUsedTimestamp = Date.now();\n\n    if (entries[uri]) {\n      entries[uri].lastUsedTimestamp = lastUsedTimestamp;\n      entries[uri].refCount += 1;\n    } else {\n      entries[uri] = {\n        lastUsedTimestamp: lastUsedTimestamp,\n        refCount: 1\n      };\n    }\n  };\n\n  ImageUriCache.remove = function remove(uri) {\n    var entries = ImageUriCache._entries;\n\n    if (entries[uri]) {\n      entries[uri].refCount -= 1;\n    }\n\n    ImageUriCache._cleanUpIfNeeded();\n  };\n\n  ImageUriCache._cleanUpIfNeeded = function _cleanUpIfNeeded() {\n    var entries = ImageUriCache._entries;\n    var imageUris = Object.keys(entries);\n\n    if (imageUris.length + 1 > ImageUriCache._maximumEntries) {\n      var leastRecentlyUsedKey;\n      var leastRecentlyUsedEntry;\n      imageUris.forEach(function (uri) {\n        var entry = entries[uri];\n\n        if ((!leastRecentlyUsedEntry || entry.lastUsedTimestamp < leastRecentlyUsedEntry.lastUsedTimestamp) && entry.refCount === 0) {\n          leastRecentlyUsedKey = uri;\n          leastRecentlyUsedEntry = entry;\n        }\n      });\n\n      if (leastRecentlyUsedKey) {\n        delete entries[leastRecentlyUsedKey];\n      }\n    }\n  };\n\n  return ImageUriCache;\n}();\n\nImageUriCache._maximumEntries = 256;\nImageUriCache._entries = {};\nexport { ImageUriCache as default };","map":{"version":3,"sources":["C:/Users/sw/Documents/MobileAppProgramming2/node_modules/react-native-web/dist/exports/Image/ImageUriCache.js"],"names":["dataUriPattern","ImageUriCache","has","uri","entries","_entries","isDataUri","test","Boolean","add","lastUsedTimestamp","Date","now","refCount","remove","_cleanUpIfNeeded","imageUris","Object","keys","length","_maximumEntries","leastRecentlyUsedKey","leastRecentlyUsedEntry","forEach","entry","default"],"mappings":"AAQA,IAAIA,cAAc,GAAG,QAArB;;AAEA,IAAIC,aAAa,GAEjB,YAAY;AACV,WAASA,aAAT,GAAyB,CAAE;;AAE3BA,EAAAA,aAAa,CAACC,GAAd,GAAoB,SAASA,GAAT,CAAaC,GAAb,EAAkB;AACpC,QAAIC,OAAO,GAAGH,aAAa,CAACI,QAA5B;AACA,QAAIC,SAAS,GAAGN,cAAc,CAACO,IAAf,CAAoBJ,GAApB,CAAhB;AACA,WAAOG,SAAS,IAAIE,OAAO,CAACJ,OAAO,CAACD,GAAD,CAAR,CAA3B;AACD,GAJD;;AAMAF,EAAAA,aAAa,CAACQ,GAAd,GAAoB,SAASA,GAAT,CAAaN,GAAb,EAAkB;AACpC,QAAIC,OAAO,GAAGH,aAAa,CAACI,QAA5B;AACA,QAAIK,iBAAiB,GAAGC,IAAI,CAACC,GAAL,EAAxB;;AAEA,QAAIR,OAAO,CAACD,GAAD,CAAX,EAAkB;AAChBC,MAAAA,OAAO,CAACD,GAAD,CAAP,CAAaO,iBAAb,GAAiCA,iBAAjC;AACAN,MAAAA,OAAO,CAACD,GAAD,CAAP,CAAaU,QAAb,IAAyB,CAAzB;AACD,KAHD,MAGO;AACLT,MAAAA,OAAO,CAACD,GAAD,CAAP,GAAe;AACbO,QAAAA,iBAAiB,EAAEA,iBADN;AAEbG,QAAAA,QAAQ,EAAE;AAFG,OAAf;AAID;AACF,GAbD;;AAeAZ,EAAAA,aAAa,CAACa,MAAd,GAAuB,SAASA,MAAT,CAAgBX,GAAhB,EAAqB;AAC1C,QAAIC,OAAO,GAAGH,aAAa,CAACI,QAA5B;;AAEA,QAAID,OAAO,CAACD,GAAD,CAAX,EAAkB;AAChBC,MAAAA,OAAO,CAACD,GAAD,CAAP,CAAaU,QAAb,IAAyB,CAAzB;AACD;;AAGDZ,IAAAA,aAAa,CAACc,gBAAd;AACD,GATD;;AAWAd,EAAAA,aAAa,CAACc,gBAAd,GAAiC,SAASA,gBAAT,GAA4B;AAC3D,QAAIX,OAAO,GAAGH,aAAa,CAACI,QAA5B;AACA,QAAIW,SAAS,GAAGC,MAAM,CAACC,IAAP,CAAYd,OAAZ,CAAhB;;AAEA,QAAIY,SAAS,CAACG,MAAV,GAAmB,CAAnB,GAAuBlB,aAAa,CAACmB,eAAzC,EAA0D;AACxD,UAAIC,oBAAJ;AACA,UAAIC,sBAAJ;AACAN,MAAAA,SAAS,CAACO,OAAV,CAAkB,UAAUpB,GAAV,EAAe;AAC/B,YAAIqB,KAAK,GAAGpB,OAAO,CAACD,GAAD,CAAnB;;AAEA,YAAI,CAAC,CAACmB,sBAAD,IAA2BE,KAAK,CAACd,iBAAN,GAA0BY,sBAAsB,CAACZ,iBAA7E,KAAmGc,KAAK,CAACX,QAAN,KAAmB,CAA1H,EAA6H;AAC3HQ,UAAAA,oBAAoB,GAAGlB,GAAvB;AACAmB,UAAAA,sBAAsB,GAAGE,KAAzB;AACD;AACF,OAPD;;AASA,UAAIH,oBAAJ,EAA0B;AACxB,eAAOjB,OAAO,CAACiB,oBAAD,CAAd;AACD;AACF;AACF,GApBD;;AAsBA,SAAOpB,aAAP;AACD,CA1DD,EAFA;;AA8DAA,aAAa,CAACmB,eAAd,GAAgC,GAAhC;AACAnB,aAAa,CAACI,QAAd,GAAyB,EAAzB;AACA,SAASJ,aAAa,IAAIwB,OAA1B","sourcesContent":["/**\r\n * Copyright (c) Nicolas Gallagher.\r\n *\r\n * This source code is licensed under the MIT license found in the\r\n * LICENSE file in the root directory of this source tree.\r\n *\r\n * \r\n */\r\nvar dataUriPattern = /^data:/;\r\n\r\nvar ImageUriCache =\r\n/*#__PURE__*/\r\nfunction () {\r\n  function ImageUriCache() {}\r\n\r\n  ImageUriCache.has = function has(uri) {\r\n    var entries = ImageUriCache._entries;\r\n    var isDataUri = dataUriPattern.test(uri);\r\n    return isDataUri || Boolean(entries[uri]);\r\n  };\r\n\r\n  ImageUriCache.add = function add(uri) {\r\n    var entries = ImageUriCache._entries;\r\n    var lastUsedTimestamp = Date.now();\r\n\r\n    if (entries[uri]) {\r\n      entries[uri].lastUsedTimestamp = lastUsedTimestamp;\r\n      entries[uri].refCount += 1;\r\n    } else {\r\n      entries[uri] = {\r\n        lastUsedTimestamp: lastUsedTimestamp,\r\n        refCount: 1\r\n      };\r\n    }\r\n  };\r\n\r\n  ImageUriCache.remove = function remove(uri) {\r\n    var entries = ImageUriCache._entries;\r\n\r\n    if (entries[uri]) {\r\n      entries[uri].refCount -= 1;\r\n    } // Free up entries when the cache is \"full\"\r\n\r\n\r\n    ImageUriCache._cleanUpIfNeeded();\r\n  };\r\n\r\n  ImageUriCache._cleanUpIfNeeded = function _cleanUpIfNeeded() {\r\n    var entries = ImageUriCache._entries;\r\n    var imageUris = Object.keys(entries);\r\n\r\n    if (imageUris.length + 1 > ImageUriCache._maximumEntries) {\r\n      var leastRecentlyUsedKey;\r\n      var leastRecentlyUsedEntry;\r\n      imageUris.forEach(function (uri) {\r\n        var entry = entries[uri];\r\n\r\n        if ((!leastRecentlyUsedEntry || entry.lastUsedTimestamp < leastRecentlyUsedEntry.lastUsedTimestamp) && entry.refCount === 0) {\r\n          leastRecentlyUsedKey = uri;\r\n          leastRecentlyUsedEntry = entry;\r\n        }\r\n      });\r\n\r\n      if (leastRecentlyUsedKey) {\r\n        delete entries[leastRecentlyUsedKey];\r\n      }\r\n    }\r\n  };\r\n\r\n  return ImageUriCache;\r\n}();\r\n\r\nImageUriCache._maximumEntries = 256;\r\nImageUriCache._entries = {};\r\nexport { ImageUriCache as default };"]},"metadata":{},"sourceType":"module"}